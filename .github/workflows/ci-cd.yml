name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      venv_path: ${{ steps.get_venv.outputs.VENV_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -

      - name: Force `.venv` in Project Root
        run: |
          poetry config virtualenvs.in-project true --local
          poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Get `.venv` Path
        id: get_venv
        run: echo "::set-output name=VENV_PATH::$(poetry env info --path)"

      # Cache Poetry Dependencies (Plan B)
      - name: Cache Poetry dependencies
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      # Cache .venv for Fastest Installs
      - name: Cache .venv
        uses: actions/cache@v3
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      # Add cleanup to remove broken
      - name: Cleanup Corrupt .venv
        if: failure()
        run: rm -rf .venv

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install poetry

      - name: Install Dependencies
        run: poetry install

      - name: Run Pre-Commit Hooks
        run: poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD:$PWD/config" >> $GITHUB_ENV

      - name: Run Migrations
        run: poetry run python config/manage.py migrate

      - name: Run Tests with Coverage
        run: poetry run pytest --cov=my_project --cov-report=term --cov-report=html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect Static Files
        run: poetry run python config/manage.py collectstatic --noinput

      - name: Build Docker Image
        run: docker build -t my-python-app .



      # Run Tests
      - name: Run Tests with Coverage
        run: poetry run pytest

