name: CI/CD Pipeline

permissions:
  contents: read        # Required to read repository content.
  actions: read         # Allows actions to read data.
  packages: write       # Required for pushing packages/images.
  checks: write         # Sometimes needed for uploading reports.
  security-events: write
  id-token: write
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: "my-django-app"
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:

  security_checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history for Gitleaks
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

      - name: Restore virtual environment cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install --no-root --no-interaction --no-ansi

      # Run Gitleaks to check for secrets
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Bandit static code security analysis
      - name: Run Bandit
        run: poetry run bandit -r ./my_project

      # Hadolint to lint Dockerfile
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  build_production:
    name: Build Production Docker Image
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push the production Docker image
      - name: Build and push Production Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max

  container_scan:
    if: github.event_name == 'pull_request'
    name: Container scan
    runs-on: ubuntu-latest
    needs: [ build_production ]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
         sarif_file: 'trivy-results.sarif'

  review:
    name: Approval for Production
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: container_scan
    environment:
      name: production
    steps:
      - name: Awaiting manual approval
        run: echo "Requires a manual reviewer to approve this environment."

  deploy_to_azure:
    name: Deploy to Azure Container App
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: review
    permissions:
      contents: read
      id-token: write  # required for Azure authentication

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to Azure using OIDC
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.GHCRTESTCONTAINER_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.GHCRTESTCONTAINER_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.GHCRTESTCONTAINER_AZURE_SUBSCRIPTION_ID }}

      # Deploy your container image from GitHub Container Registry to Azure Container App
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ghcr-test-container
          resourceGroup: testEnv
          imageToDeploy: ghcr.io/${{ github.repository }}:${{ github.sha }}
          registryUrl: ghcr.io
          registryUsername: ${{ secrets.GHCRTESTCONTAINER_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.GHCRTESTCONTAINER_REGISTRY_PASSWORD }}