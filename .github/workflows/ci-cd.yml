name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install Poetry
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -


      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD:$PWD/config" >> $GITHUB_ENV


      - name: Run Migrations
        run: poetry run python config/manage.py migrate

      - name: Force `.venv` in Project Root
        run: |
          poetry config virtualenvs.in-project true --local
          poetry config virtualenvs.in-project true

      - name: Get `.venv` Path
        run: echo "VENV_PATH=$(poetry env info --path)" >> $GITHUB_ENV



      - name: Confirm `.venv` Path
        run: poetry env info


      # Cache Poetry Dependencies (Plan B)
      - name: Cache Poetry dependencies
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-
            
      # Cache .venv for Fastest Installs (Best Plan)
      - name: Cache .venv
        uses: actions/cache@v3
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      # Add cleanup to remove broken .venv (Optional)
      - name: Cleanup Corrupt .venv
        if: failure()
        run: rm -rf .venv

      # Install Dependencies
      - name: Install Dependencies
        run: poetry install

      - name: Install 'Ruff'
        run: poetry add ruff --dev

      # Run Tests
      - name: Run Tests with Coverage
        run: poetry run pytest

