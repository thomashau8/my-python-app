name: CI/CD Pipeline
#TODO fix permissions her
permissions:
  contents: read
  actions: read
  packages: write
  checks: write
  security-events: write
  id-token: write
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: "my-django-app"
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"
  AZURE_RESOURCE_GROUP_PROD: rg_my_python_app_prod
  AZURE_ACA_ENVIRONMENT_PROD: managedEnvironment-rgmypythonapppr-86f7
  AZURE_ACA_APP_NAME_PROD: prod-container
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TARGET_PORT: 8000

jobs:

  build_production:
    name: Build Production Docker Image
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push the production Docker image
      - name: Build and push Production Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:cache,mode=max

  container_scan:
    if: github.event_name == 'push'
    name: Container scan
    runs-on: ubuntu-latest
    needs: [ build_production ]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
         sarif_file: 'trivy-results.sarif'

  review:
    name: Approval for Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: container_scan
    environment:
      name: production
    steps:
      - name: Awaiting manual approval
        run: echo "Requires a manual reviewer to approve this environment."

  deploy_to_azure:
    name: Deploy to Azure Container App
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: review
    environment:
      name: staging
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to Azure using OIDC
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy your container image from GitHub Container Registry to Azure Container App
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.AZURE_ACA_APP_NAME_PROD }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP_PROD }}
          imageToDeploy: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          registryUrl: ${{ env.REGISTRY_NAME }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: ${{ env.TARGET_PORT }}

