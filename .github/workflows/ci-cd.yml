name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Restore cached Poetry installation (if available)
      - name: Restore Poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ~/.local            # Poetry is installed here by default
          key: poetry-${{ runner.os }}-1.4.2  # Cache key includes OS and Poetry version

      # Restore cached virtual environment (dependencies), if available
      - name: Restore dependencies cache
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: .venv               # Path to virtual env directory
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # Install Poetry only if it wasn't restored from cache
      - name: Install Poetry (if not cached)
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python -  # Install Poetry

      # Add Poetry to PATH for this job (so the `poetry` command is available)
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Configure Poetry to use in-project virtual environment (creates .venv in project)
      - name: Configure Poetry to use in-project venv
        run: poetry config virtualenvs.in-project true

      # Install dependencies only if they weren't cached (creates/updates .venv)
      - name: Install dependencies (if cache missed)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Save the .venv directory as an artifact for use in other jobs
      - name: Upload .venv artifact
        uses: actions/upload-artifact@v4
        with:
          name: venv
          path: .venv

  lint:
    runs-on: ubuntu-latest
    needs: setup         # Run this job after 'setup' completes
    steps:
      - uses: actions/checkout@v3

      # Restore cached Poetry installation (so Poetry is already available)
      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      # Download the .venv artifact from the setup job
      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: .           # Extract to workspace, restoring .venv folder

      # Add Poetry to PATH in this job
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Run linter using Poetry (reuses dependencies from .venv)
      - name: Run linter
        run: poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2
      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run tests
        run: poetry run pytest

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2
      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: .
      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Build package
        run: poetry build

      # Run Tests
      - name: Run Tests with Coverage
        run: poetry run pytest

