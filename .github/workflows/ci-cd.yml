name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore Poetry cache
      - name: Restore Poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      # Restore cached virtual environment
      - name: Restore .venv cache
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install Poetry (if not cached)
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry to use in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (if cache missed)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Debug .venv Existence
        run: ls -la .venv || echo "No .venv found"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      - name: Download .venv from cache (if available)
        # Here we rely on the cache restored by the setup job
        run: ls -la ${{ env.VENV_PATH }}

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: poetry install

      - name: Run Pre-Commit Hooks
        run: poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: poetry install

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD:$PWD/config" >> $GITHUB_ENV

      - name: Run Migrations
        run: poetry run python config/manage.py migrate

      - name: Run Tests with Coverage
        run: poetry run pytest --cov=my_project --cov-report=term --cov-report=html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: poetry install

      - name: Collect Static Files
        run: poetry run python config/manage.py collectstatic --noinput

      - name: Build Docker Image
        run: docker build -t my-python-app .


      # Run Tests
      - name: Run Tests with Coverage
        run: poetry run pytest

