# .github/workflows/production.yml
name: Production CI/CD Pipeline

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  checks: write
  pull-requests: read

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"
  DJANGO_MANAGE_PY_PATH: 'manage.py'
  PYTEST_COV_OPTIONS: '--cov=my_project --cov-report=term --cov-report=html' # Adjust!
  BANDIT_SCAN_PATH: './my_project' # Adjust!
  # Azure details
  AZURE_RESOURCE_GROUP_PROD: rg_my_python_app_prod
  AZURE_ACA_ENVIRONMENT_PROD: managedEnvironment-rgmypythonapppr-86f7
  AZURE_ACA_APP_NAME_PROD: prod-container
  TARGET_PORT: 8000
  # Registry details
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: /.github/actions/run-linter@main # Use version tag later (@v1.0)
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-tests@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
          django-manage-py-path: ${{ env.DJANGO_MANAGE_PY_PATH }}
          pytest-cov-options: ${{ env.PYTEST_COV_OPTIONS }}
          coverage-artifact-name: 'prod-coverage-report'

  security_checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-security-checks@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          bandit-scan-path: ${{ env.BANDIT_SCAN_PATH }}

  build_and_push_production_image:
    name: Build and Push Production Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ lint, test, security_checks ]
    outputs:
      image_name_full: ${{ steps.set-names.outputs.image_name_full }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image names
        id: set-names
        run: |
          COMMIT_SHA="${{ github.sha }}"
          IMAGE_TAG="${COMMIT_SHA}"
          IMAGE_NAME_FULL="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_name_full=${IMAGE_NAME_FULL}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push production Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ steps.set-names.outputs.image_name_full }}
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
           cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:cache
           cache-to: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:cache,mode=max

  container_scan:
    name: Container Scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_and_push_production_image
    steps:
      - uses: ./.github/actions/run-container-scan@main
        with:
          image-ref: ${{ needs.build_and_push_production_image.outputs.image_name_full }}

  review:
    name: Approval for Production
    # Runs only if the trigger was a PUSH to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: container_scan
    environment:
      name: production
    steps:
      - name: Awaiting manual approval
        run: echo "Requires a manual reviewer to approve the 'production' environment deployment."

  deploy_to_azure_production:
    name: Deploy to Azure Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build_and_push_production_image, review]
    environment:
      name: production
    permissions:
      id-token: write
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps (Production)
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.AZURE_ACA_APP_NAME_PROD }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP_PROD }}
          containerAppEnvironment: ${{ env.AZURE_ACA_ENVIRONMENT_PROD }}
          imageToDeploy: ${{ needs.build_and_push_production_image.outputs.image_name_full }}
          registryUrl: ${{ env.REGISTRY_NAME }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: ${{ env.TARGET_PORT }}
          enableProbe: true
          probeType: Readiness
          probeTcpSocketPort: ${{ env.TARGET_PORT }}
          probeInitialDelaySeconds: 60
          probePeriodSeconds: 15