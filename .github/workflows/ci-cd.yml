name: CI/CD Pipeline

permissions:
  contents: read        # Required to read repository content.
  actions: read         # Allows actions to read data.
  packages: write       # Required for pushing packages/images.
  checks: write         # Sometimes needed for uploading reports.
  security-events: write
  id-token: write
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: "my-django-app"
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore Poetry cache
      - name: Restore Poetry cache
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.4.2

      # Restore cached virtual environment
      - name: Restore .venv cache
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install Poetry (if not cached)
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry to use in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (if cache missed)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Prepare artifact directories
        run: |
          mkdir -p ${{ github.workspace }}/venv_artifact
          mkdir -p ${{ github.workspace }}/local_artifact

          # Copy the contents from .venv (assumed to be in the workspace already)
          cp -r .venv/* ${{ github.workspace }}/venv_artifact/

          # Copy the contents of ~/.local (from home) into the workspace
          cp -r ~/.local/* ${{ github.workspace }}/local_artifact/

      - name: Upload .venv artifact
        uses: actions/upload-artifact@v4
        with:
          name: venv-artifact
          path: ${{ github.workspace }}/venv_artifact

      - name: Upload poetry cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: poetry-cache-artifact
          path: ${{ github.workspace }}/local_artifact


  security_checks:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv-artifact
          path: ${{ github.workspace }}/.venv

      - name: Download poetry cache artifact
        uses: actions/download-artifact@v4
        with:
          name: poetry-cache-artifact
          path: /home/runner/.local

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Fix Poetry permissions
        run: |
          chmod +x $HOME/.local/bin/poetry
          chmod -R +x $HOME/.local/share/pypoetry/venv/bin/

      - name: Fix venv permissions
        run: chmod -R +x ${{ github.workspace }}/.venv/bin

      # Check for leaked secrets
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check Python code vulnerabilities
      - name: Run Bandit security analysis
        run: |
          poetry install --no-root --no-interaction
          poetry run bandit -r ./my_project

      # Check Dockerfile best practices
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile


  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv-artifact
          path: ${{ github.workspace }}/.venv

      - name: Download poetry cache artifact
        uses: actions/download-artifact@v4
        with:
          name: poetry-cache-artifact
          path: /home/runner/.local

      - name: Fix Poetry permissions
        run: |
          chmod +x $HOME/.local/bin/poetry
          chmod -R +x $HOME/.local/share/pypoetry/venv/bin/

      - name: Fix venv permissions
        run: chmod -R +x ${{ github.workspace }}/.venv/bin

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run Pre-Commit Hooks
        run: poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download .venv artifact
        uses: actions/download-artifact@v4
        with:
          name: venv-artifact
          path: ${{ github.workspace }}/.venv

      - name: Download poetry cache artifact
        uses: actions/download-artifact@v4
        with:
          name: poetry-cache-artifact
          path: /home/runner/.local

      - name: Fix Poetry permissions
        run: |
          chmod +x $HOME/.local/bin/poetry
          chmod -R +x $HOME/.local/share/pypoetry/venv/bin/

      - name: Fix venv permissions
        run: chmod -R +x ${{ github.workspace }}/.venv/bin

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD:$PWD/config" >> $GITHUB_ENV

      - name: Run Migrations
        run: poetry run python manage.py migrate

      - name: Run Tests with Coverage
        run: poetry run pytest --cov=my_project --cov-report=term --cov-report=html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build_production:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: [ test, lint, security_checks ]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push the production Docker image
      - name: Build and push Production Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max

  container_scan:
    name: Container scan
    runs-on: ubuntu-latest
    needs: build_production
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
         sarif_file: 'trivy-results.sarif'

  deploy_to_azure:
    name: Deploy to Azure Container App
    runs-on: ubuntu-latest
    needs: container_scan
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write  # required for Azure authentication

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to Azure using OIDC (recommended method)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy your container image from GitHub Container Registry to Azure Container App
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: <ghcr-test-container>
          resourceGroup: <test-env>
          imageToDeploy: ghcr.io/${{ github.repository }}:${{ github.sha }}
          registryUrl: ghcr.io
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.PACKAGE_SECRET }}