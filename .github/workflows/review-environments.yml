name: Deploy Review Environment

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write

on:
  push:
    branches-ignore:
      - main
      - staging
  # Trigger on specific pull request events targeting any branch
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"
  AZURE_RESOURCE_GROUP_REVIEW: rg_my_python_app_review
  ACA_ENVIRONMENT_NAME: review-env
  ACA_APP_NAME_PREFIX: review-app-
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TARGET_PORT: 8000
  # Project Specifics (Adjust these!)
  DJANGO_MANAGE_PY_PATH: 'manage.py'
  PYTEST_COV_OPTIONS: '--cov=my_project --cov-report=term' # No htmlcov needed usually for review
  BANDIT_SCAN_PATH: './my_project'

# Prevent concurrent runs for the same branch/PR, cancel older runs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-linter@main # Use main branch or specific tag/commit
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Optional: Add secrets if tests need DB access etc.
    # secrets: inherit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-tests@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
          django-manage-py-path: ${{ env.DJANGO_MANAGE_PY_PATH }}
          pytest-cov-options: ${{ env.PYTEST_COV_OPTIONS }}
          # Prevent coverage artifact upload for review builds
          coverage-artifact-name: '' # Pass empty string or specific input to disable upload

  security_checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-security-checks@main # change this from @main to v1.0 eventually
        with:
          python-version: ${{ env.PYTHON_VERSION }} # Still needed for pipx setup
          bandit-scan-path: ${{ env.BANDIT_SCAN_PATH }}
          # dockerfile-path: 'Dockerfile' # Default is usually fine

  # --- Build, Deploy, Comment Job (Depends on Checks) ---
  build_deploy_comment:
    name: Build, Deploy & Comment (Review Env)
    runs-on: ubuntu-latest
    needs: [lint, test, security_checks] # Run only after checks pass
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_REVIEW }} # Use REVIEW secrets
          tenant-id: ${{ secrets.AZURE_TENANT_ID_REVIEW }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_REVIEW }}

      - name: Set Dynamic Names
        id: names
        run: |
          # Use head_ref for PRs, ref_name for direct branch pushes
          raw_ref="${{ github.head_ref || github.ref_name }}"
          branch_slug=$(echo "$raw_ref" | sed -e 's|[^a-zA-Z0-9]|-|g' | tr '[:upper:]' '[:lower:]' | sed -e 's/^-*//' -e 's/-*$//' | cut -c1-20)
          app_name=$(echo "${{ env.ACA_APP_NAME_PREFIX }}${branch_slug}" | cut -c1-32)
          # Use commit SHA for unique image tag per deployment
          image_tag="${{ github.sha }}"
          full_image_name="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${image_tag}"

          echo "Branch/Ref: ${raw_ref}"
          echo "Sanitized Slug: ${branch_slug}"
          echo "Container App Name: ${app_name}"
          echo "Image Tag: ${image_tag}"
          echo "Full Image Name: ${full_image_name}"

          echo "APP_NAME=${app_name}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${full_image_name}" >> $GITHUB_ENV
        shell: bash

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU # Needed for buildx multi-platform (good practice)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.FULL_IMAGE_NAME }}
          # Use GHA cache for review builds - faster than registry cache usually
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to ACA Review Environment
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP_REVIEW }}
          containerAppEnvironment: ${{ env.ACA_ENVIRONMENT_NAME }}
          containerAppName: ${{ env.APP_NAME }}
          imageToDeploy: ${{ env.FULL_IMAGE_NAME }} # Use full name
          registryUrl: ${{ env.REGISTRY_NAME }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: ${{ env.TARGET_PORT }}
          ingress: external
          enableProbe: true # Add probes
          probeType: Readiness
          probeTcpSocketPort: ${{ env.TARGET_PORT }} # Or use probeRequestPath/probePort for HTTP
          probeInitialDelaySeconds: 60
          probePeriodSeconds: 15

      - name: Get ACA FQDN with Retries
        id: get_url
        if: github.event_name == 'pull_request'
        run: |
          echo "Fetching FQDN for app: ${{ env.APP_NAME }} in RG: ${{ env.AZURE_RESOURCE_GROUP_REVIEW }}"
          fqdn=""
          for attempt in {1..5}; do
            fqdn=$(az containerapp show --name "${{ env.APP_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP_REVIEW }}" --query properties.configuration.ingress.fqdn --output tsv 2>/dev/null)
            if [ -n "$fqdn" ]; then
              echo "FQDN found on attempt $attempt: $fqdn"
              break
            fi
            if [ $attempt -lt 5 ]; then
              # Reduced sleep for faster feedback in review, adjust if needed
              echo "Attempt $attempt: FQDN not found for ${{ env.APP_NAME }}. Waiting 15 seconds..."
              sleep 15
            else
              echo "Attempt $attempt: FQDN still not found."
            fi
          done
          if [ -z "$fqdn" ]; then
            echo "::error::Could not retrieve FQDN for ${{ env.APP_NAME }} after $attempt attempts."
            echo "review_url=unknown" >> "$GITHUB_OUTPUT"
          else
            app_url="https://${fqdn}"
            echo "Final App URL: ${app_url}"
            echo "review_url=${app_url}" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment PR with Review URL
        if: github.event_name == 'pull_request' && steps.get_url.outputs.review_url != 'unknown'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-environment-deployment
          message: |
            üöÄ **Review Environment Deployed/Updated:** (in shared env `${{ env.ACA_ENVIRONMENT_NAME }}`)

            Branch: `${{ github.head_ref }}`
            App Name: `${{ env.APP_NAME }}`
            Commit: `${{ github.sha }}`

            ‚úÖ **Deployment Successful!**

            [Access Review App](${{ steps.get_url.outputs.review_url }})

      # Failure comment remains the same - checks overall job failure
      - name: Post Failure Comment
        if: failure() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-environment-deployment # Same header
          message: |
            ‚ùå **Review Environment Deployment Failed:**

            Branch: `${{ github.head_ref }}`
            Commit: `${{ github.sha }}`

            Please check the [Actions logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.