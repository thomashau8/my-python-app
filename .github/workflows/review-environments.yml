name: Deploy Review Environment

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write

on:
  push:
    branches-ignore:
      - main
      - staging
  # Trigger on specific pull request events targeting any branch
  pull_request:
    types: [opened, synchronize, reopened]

env:
  AZURE_RESOURCE_GROUP_REVIEW: rg_my_python_app_review
  ACA_ENVIRONMENT_NAME: review-env
  ACA_APP_NAME_PREFIX: review-app-
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TARGET_PORT: 8000

# Prevent concurrent runs for the same branch/PR, cancel older runs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy_review_environment:
    name: Deploy Review Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Login to Azure using OIDC
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_REVIEW }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_REVIEW }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_REVIEW }}

      # #Determine a unique, safe name for the container app based on the branch/PR
      - name: Set Dynamic Names
        id: names
        run: |
          # Use head_ref for PRs, ref_name for direct branch pushes
          raw_ref="${{ github.head_ref || github.ref_name }}"
          # Sanitize: lowercase, replace non-alphanumeric with '-', trim '-' edges, limit length
          # Keep it short enough so prefix + slug + potential hash don't exceed limits (ACA name limit is 32)
          branch_slug=$(echo "$raw_ref" | sed -e 's|[^a-zA-Z0-9]|-|g' | tr '[:upper:]' '[:lower:]' | sed -e 's/^-*//' -e 's/-*$//' | cut -c1-20)
          # Ensure app name doesn't exceed max length (32 chars)
          app_name=$(echo "${{ env.ACA_APP_NAME_PREFIX }}${branch_slug}" | cut -c1-32)
          # Always use commit SHA for unique image tag per deployment
          image_tag="${{ github.sha }}"
          full_image_name="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${image_tag}"

          echo "Branch/Ref: ${raw_ref}"
          echo "Sanitized Slug: ${branch_slug}"
          echo "Container App Name: ${app_name}"
          echo "Image Tag: ${image_tag}"
          echo "Full Image Name: ${full_image_name}"

          echo "APP_NAME=${app_name}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${full_image_name}" >> $GITHUB_ENV
          echo "BRANCH_SLUG=${branch_slug}" >> $GITHUB_ENV # Also export slug if needed elsewhere

      # Login to GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image, tagged with commit SHA
      - name: Build and Push Docker Image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.FULL_IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Deploy or update the Container App in the EXISTING ACA environment
      - name: Deploy to ACA Review Environment
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP_REVIEW }}
          containerAppEnvironment: ${{ env.ACA_ENVIRONMENT_NAME }}
          containerAppName: ${{ env.APP_NAME }}
          imageToDeploy: ${{ env.FULL_IMAGE_NAME }}
          registryUrl: ${{ env.REGISTRY_NAME }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: ${{ env.TARGET_PORT }}
          ingress: external

      - name: Debug Deploy Output
        run: |
          echo "Deployment Step Succeeded. Checking outputs..."
          echo "Container App URL Output: >>${{ steps.deploy.outputs.containerAppUrl }}<<"   

      - name: Comment PR with Review URL
        if: github.event_name == 'pull_request' && steps.deploy.outputs.containerAppUrl != '' # Check if URL output exists
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-environment-deployment
          message: |
            🚀 **Review Environment Deployed/Updated:** (in shared env `${{ env.ACA_ENVIRONMENT_NAME }}`)

            Branch: `${{ github.head_ref }}`
            App Name: `${{ env.APP_NAME }}`
            Commit: `${{ github.sha }}`

            ✅ **Deployment Successful!**

            [Access Review App](${{ steps.deploy.outputs.containerAppUrl }})

      # Handle deployment failure or missing URL
      - name: Post Failure Comment
        if: failure() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-environment-deployment
          message: |
            ❌ **Review Environment Deployment Failed:**

            Branch: `${{ github.head_ref }}`
            Commit: `${{ github.sha }}`

            Please check the [Actions logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.