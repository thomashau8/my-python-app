name: Dev CI/CD Pipeline
#test123
permissions:
  contents: read
  packages: write
on:
  push:
    branches:
      - staging

env:
  PROJECT_NAME: "my-django-app"
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

      - name: Restore cached virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install Poetry (if not cached)
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (if cache missed)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Prepare artifact directories
        run: |
          mkdir -p ${{ github.workspace }}/venv_artifact
          mkdir -p ${{ github.workspace }}/local_artifact
          cp -r .venv/* ${{ github.workspace }}/venv_artifact/
          cp -r ~/.local/* ${{ github.workspace }}/local_artifact/

      - name: Upload .venv artifact
        uses: actions/upload-artifact@v4
        with:
          name: venv-artifact
          path: ${{ github.workspace }}/venv_artifact

      - name: Upload poetry cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: poetry-cache-artifact
          path: ${{ github.workspace }}/local_artifact

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Common Setup
        uses: ./.github/actions/setup-environment/
        with:
          venvArtifactName: 'venv-artifact'
          poetryCacheArtifactName: 'poetry-cache-artifact'

      - name: Run Pre-Commit Hooks
        run: poetry run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Common Setup
        uses: ./.github/actions/setup-environment/
        with:
          venvArtifactName: 'venv-artifact'
          poetryCacheArtifactName: 'poetry-cache-artifact'

      - name: Run Migrations
        run: poetry run python manage.py migrate

      - name: Run Tests with Coverage
        run: poetry run pytest --cov=my_project --cov-report=term --cov-report=html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build_and_push_staging_image:
    name: Build and Push Staging Docker Image
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sets up multi-platform docker image
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push staging Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:staging-${{ github.sha }}
            ghcr.io/${{ github.repository }}:staging-latest
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:staging-cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:staging-cache,mode=max

  deploy_to_azure_staging:
    name: Deploy to Azure Staging
    runs-on: ubuntu-latest
    needs: build_and_push_staging_image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.STAGING_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.STAGING_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.STAGING_AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps (Staging)
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: staging
          resourceGroup: testEnv
          imageToDeploy: ghcr.io/${{ github.repository }}:staging-${{ github.sha }}
          registryUrl: ghcr.io
          registryUsername: ${{ secrets.GHCR_STAGING_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.GHCR_STAGING_REGISTRY_PASSWORD }}