name: Staging CI/CD Pipeline

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

on:
  push:
    branches:
      - staging

env:
  PROJECT_NAME: "my-django-app"
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "2.0.1"
  AZURE_RESOURCE_GROUP_STAGING: rg_my_python_app_staging
  AZURE_ACA_ENVIRONMENT_STAGING: managedEnvironment-rgmypythonappst-8ccb
  AZURE_ACA_APP_NAME_STAGING: staging-container
  REGISTRY_NAME: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TARGET_PORT: 8000
  DJANGO_MANAGE_PY_PATH: "manage.py"
  PYTEST_COV_OPTIONS: '--cov=my_project --cov-report=term --cov-report=html' # Change my_project
  BANDIT_SCAN_PATH: './my_project' # Change my_project

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-linter # Use main branch or a specific tag/commit
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Optional: Add secrets if tests need DB access etc.
    # secrets: inherit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-tests
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
          django-manage-py-path: ${{ env.DJANGO_MANAGE_PY_PATH }}
          pytest-cov-options: ${{ env.PYTEST_COV_OPTIONS }}
          # coverage-artifact-name: 'staging-coverage-report' # Optional override

  security_checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-security-checks
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          bandit-scan-path: ${{ env.BANDIT_SCAN_PATH }}
          # dockerfile-path: 'Dockerfile' # Default is usually fine

  build_and_push_staging_image:
    name: Build and Push Staging Docker Image
    runs-on: ubuntu-latest
    needs: [ lint, test, security_checks ]
    outputs:
      image_name_full: ${{ steps.set-names.outputs.image_name_full }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image names
        id: set-names
        run: |
          IMAGE_TAG="staging-${{ github.sha }}"
          IMAGE_NAME_FULL="${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_name_full=${IMAGE_NAME_FULL}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push staging Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ steps.set-names.outputs.image_name_full }}
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-latest # Keep staging-latest if desired
          # Add caching if builds are slow
          # cache-from: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-cache
          # cache-to: type=registry,ref=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-cache,mode=max

  container_scan:
    name: Container Scan
    runs-on: ubuntu-latest
    needs: build_and_push_staging_image
    steps:
      - uses: ./.github/actions/run-container-scan@main
        with:
          image-ref: ${{ needs.build_and_push_staging_image.outputs.image_name_full }}
          # exit-code: '0' # Set to 0 if you only want to report, not fail the build on vulnerabilities

  deploy_to_azure_staging:
    name: Deploy to Azure Staging
    runs-on: ubuntu-latest
    needs: [build_and_push_staging_image, container_scan] # Depends on build output and successful scan
    environment:
      name: staging # Links to GitHub Environment for secrets
    permissions:
      id-token: write # Required for Azure Login
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps (Staging)
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.AZURE_ACA_APP_NAME_STAGING }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP_STAGING }}
          containerAppEnvironment: ${{ env.AZURE_ACA_ENVIRONMENT_STAGING }} # Explicitly set env
          imageToDeploy: ${{ needs.build_and_push_staging_image.outputs.image_name_full }}
          registryUrl: ${{ env.REGISTRY_NAME }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          targetPort: ${{ env.TARGET_PORT }}
          enableProbe: true
          probeType: Readiness
          probeTcpSocketPort: ${{ env.TARGET_PORT }}
          probeInitialDelaySeconds: 60
          probePeriodSeconds: 15

      - name: Staging Deployment URL
        # Check action output first, fallback to CLI if needed (though deploy action should work now)
        run: |
          url_output="${{ steps.deploy.outputs.containerAppUrl }}"
          if [ -n "$url_output" ]; then
            echo "Staging App URL (from action output): $url_output"
          else
            echo "Action output empty, trying CLI..."
            # Add CLI fetch logic here if needed as a fallback
            echo "Staging App URL: (Not Available)"
          fi